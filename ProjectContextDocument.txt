# Crescendo Piano Platform Context Document

## Project Overview

Crescendo (www.practicecrescendo.com) is a web-based platform helping pianists improve through AI analysis of practice recordings. The platform focuses on post-practice analysis with personalized coaching with sheet music handling. 

By leveraging the efficiency of SvelteKit for the frontend user experience and powerful Rust processing on the backend, Crescendo aims to provide detailed insights that were previously only available through in-person instruction.

### Core Vision

Create an accessible platform providing detailed, AI-powered analysis of piano practice recordings with actionable feedback.

### Target Users
- Piano students (all levels)
- Piano teachers
- Self-taught pianists
- Music schools and conservatories

## Technology Stack

### Frontend (SvelteKit)
- **Framework**: SvelteKit for end-to-end web application development
- **Language**: TypeScript for type safety
- **State Management**: Built-in Svelte stores
- **UI Components**: Svelte components with scoped CSS
- **Styling**: Tailwind CSS with DaisyUI and Lucide icons
- **Audio Visualization**: Wavesurfer.js integrated into Svelte components
- **Authentication**: Supabase Auth for SvelteKit

### Backend (Separate API)
- **API Layer**: Rust Axum
- **Audio Processing**: Symphonia
- **ML Integration**: TensorFlow for advanced audio analysis
- **AI Coaching**: Anthropic Claude API

### Data Storage
- **Primary Database**: Supabase PostgreSQL
- **File Storage**: Supabase Storage for recordings and sheet music
- **Vector Storage**: Supabase Vector for similarity searches on musical patterns
- **ORM**: Drizzle for Query Layer
- **Zod**: Validations

### DevOps
- **Hosting**: Railway Cloud Deployment
- **Monitoring**: Sentry.io for error tracking and performance

## MVP Features

### 1. User & Authentication System
- Simple sign-up/login flow
- Basic user profiles
- Practice history tracking

### 2. Sheet Music Management
- Upload and view PDF sheet music
- Basic organization (composer, difficulty)
- Sheet music viewer with fixed annotations

### 3. Recording Management
- Audio recording upload
- Basic playback with waveform visualization
- Organization by associated sheet music

### 4. Analysis Pipeline
- Backend API for audio processing
- Note detection and basic timing analysis
- Performance feedback generation via Claude API
- Visualization of results with sheet music references

### 5. Minimalist UI
- Dashboard showing practice history
- Sheet music library view
- Recording management interface
- Analysis results page with actionable feedback
