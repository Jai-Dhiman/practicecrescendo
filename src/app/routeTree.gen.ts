/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./app/routes/__root";
import { Route as IndexImport } from "./app/routes/index";
import { Route as SheetMusicIndexImport } from "./app/routes/sheet-music/index";
import { Route as RecordingsIndexImport } from "./app/routes/recordings/index";
import { Route as SheetMusicidImport } from "./app/routes/sheet-music/[id]";
import { Route as RecordingsidImport } from "./app/routes/recordings/[id]";

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const SheetMusicIndexRoute = SheetMusicIndexImport.update({
  id: "/sheet-music/",
  path: "/sheet-music/",
  getParentRoute: () => rootRoute,
} as any);

const RecordingsIndexRoute = RecordingsIndexImport.update({
  id: "/recordings/",
  path: "/recordings/",
  getParentRoute: () => rootRoute,
} as any);

const SheetMusicidRoute = SheetMusicidImport.update({
  id: "/sheet-music/[id]",
  path: "/sheet-music/[id]",
  getParentRoute: () => rootRoute,
} as any);

const RecordingsidRoute = RecordingsidImport.update({
  id: "/recordings/[id]",
  path: "/recordings/[id]",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/recordings/[id]": {
      id: "/recordings/[id]";
      path: "/recordings/[id]";
      fullPath: "/recordings/[id]";
      preLoaderRoute: typeof RecordingsidImport;
      parentRoute: typeof rootRoute;
    };
    "/sheet-music/[id]": {
      id: "/sheet-music/[id]";
      path: "/sheet-music/[id]";
      fullPath: "/sheet-music/[id]";
      preLoaderRoute: typeof SheetMusicidImport;
      parentRoute: typeof rootRoute;
    };
    "/recordings/": {
      id: "/recordings/";
      path: "/recordings";
      fullPath: "/recordings";
      preLoaderRoute: typeof RecordingsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/sheet-music/": {
      id: "/sheet-music/";
      path: "/sheet-music";
      fullPath: "/sheet-music";
      preLoaderRoute: typeof SheetMusicIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/recordings/[id]": typeof RecordingsidRoute;
  "/sheet-music/[id]": typeof SheetMusicidRoute;
  "/recordings": typeof RecordingsIndexRoute;
  "/sheet-music": typeof SheetMusicIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/recordings/[id]": typeof RecordingsidRoute;
  "/sheet-music/[id]": typeof SheetMusicidRoute;
  "/recordings": typeof RecordingsIndexRoute;
  "/sheet-music": typeof SheetMusicIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/recordings/[id]": typeof RecordingsidRoute;
  "/sheet-music/[id]": typeof SheetMusicidRoute;
  "/recordings/": typeof RecordingsIndexRoute;
  "/sheet-music/": typeof SheetMusicIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/recordings/[id]" | "/sheet-music/[id]" | "/recordings" | "/sheet-music";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/recordings/[id]" | "/sheet-music/[id]" | "/recordings" | "/sheet-music";
  id: "__root__" | "/" | "/recordings/[id]" | "/sheet-music/[id]" | "/recordings/" | "/sheet-music/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  RecordingsidRoute: typeof RecordingsidRoute;
  SheetMusicidRoute: typeof SheetMusicidRoute;
  RecordingsIndexRoute: typeof RecordingsIndexRoute;
  SheetMusicIndexRoute: typeof SheetMusicIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RecordingsidRoute: RecordingsidRoute,
  SheetMusicidRoute: SheetMusicidRoute,
  RecordingsIndexRoute: RecordingsIndexRoute,
  SheetMusicIndexRoute: SheetMusicIndexRoute,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/recordings/[id]",
        "/sheet-music/[id]",
        "/recordings/",
        "/sheet-music/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/recordings/[id]": {
      "filePath": "recordings/[id].tsx"
    },
    "/sheet-music/[id]": {
      "filePath": "sheet-music/[id].tsx"
    },
    "/recordings/": {
      "filePath": "recordings/index.tsx"
    },
    "/sheet-music/": {
      "filePath": "sheet-music/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
