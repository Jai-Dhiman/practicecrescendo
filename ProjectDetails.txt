# Crescendo Piano Platform Context Document

## Project Overview

Crescendo (www.practicecrescendo.com) is a web-based platform designed to help pianists improve their skills through intelligent analysis of practice recordings. Unlike real-time feedback systems, Crescendo focuses on detailed post-practice analysis using AI to provide personalized coaching.

### Core Vision
To create an accessible platform that helps pianists of all levels improve by providing detailed, AI-powered analysis of their practice recordings with specific, actionable feedback tied to their sheet music.

### Target Users
- Piano students (beginner to advanced)
- Piano teachers who want to provide better guidance between lessons
- Self-taught pianists seeking professional-quality feedback
- Music schools and conservatories

## Technology Stack

### Frontend
- **Framework**: Tanstack Start with React
- **Language**: TypeScript
- **Build Tool**: Vite
- **State Management**: Zustand
- **Data Fetching**: TanStack Query
- **Routing**: TanStack Router
- **UI Components**: TanStack Form and Table

### Styling
- **CSS Framework**: Tailwind CSS
- **Component Library**: DaisyUI
- **Complex UI Elements**: Radix UI Primitives
- **Icons**: Lucide

### Audio Processing
- **Core API**: Web Audio API
- **Visualization**: Wavesurfer.js
- **Optional Client Processing**: FFmpeg.wasm

### Backend & Storage
- **Primary Backend**: Supabase
  - Authentication
  - PostgreSQL database
  - Storage for recordings and sheet music
  - Row-level security
  - Realtime features (optional)
  - Vector database (pgvector) for music pattern analysis
- **Supplementary Backend**: Node.js with Hono.js for specialized processing

### AI Analysis & Coaching
- **Primary AI**: Anthropic Claude API for coaching and feedback
- **Lightweight Analysis**: TensorFlow.js for browser-based processing
- **Advanced Audio Analysis**: Python backend with Librosa (server-side)

## MVP Features

### 1. User Management
- User registration and authentication
- Basic profile with skill level and preferences
- Practice history tracking

### 2. Recording System
- Browser-based audio recording
- Audio file upload capability
- Basic audio playback with visualization
- Recording organization and labeling

### 3. Sheet Music Management
- Upload and storage of sheet music (PDF)
- Basic sheet music viewer
- Organization by composer/difficulty/collection
- Association between recordings and sheet music

### 4. Basic Analysis Pipeline
- Note detection (pitch identification)
- Rhythm and timing analysis
- Basic dynamics assessment
- Comparison with sheet music (if available)

### 5. AI Coaching
- Performance summaries
- Identification of strengths and areas for improvement
- Specific practice recommendations
- Progress tracking across recordings

### 6. User Interface
- Dashboard with practice history
- Recording management page
- Analysis results view with annotations
- Sheet music library

## Future Development Plans

### Phase 2: Enhanced Analysis
- Advanced musical expression analysis
- Style-specific feedback (classical, jazz, etc.)
- Comparative analysis between recordings
- Detailed technical assessment (articulation, pedaling)

### Phase 3: Expanded Features
- Teacher-student collaboration tools
- Community features and shared recordings
- Custom exercise generation based on weaknesses
- Performance comparison with professional recordings
- Mobile application

## Technical Implementation Details

### Database Schema
- Users table (id, email, skill_level, preferences)
- Pieces table (id, title, composer, difficulty, sheet_music_url)
- Recordings table (id, user_id, piece_id, recording_url, duration, created_at)
- Analysis_results table (id, recording_id, results_json, created_at)

### Authentication Flow
- Supabase Authentication with email/password and OAuth options
- Role-based permissions (student, teacher, admin)

### Recording Processing Pipeline
1. Capture audio in browser or upload file
2. Store in Supabase storage
3. Trigger analysis with serverless function
4. Process audio for feature extraction
5. Generate analysis results and store
6. Request AI coaching based on analysis
7. Present results to user with annotations

### Analysis Metrics
- Note accuracy (correct notes played)
- Timing precision (rhythmic accuracy)
- Dynamic range and control
- Tempo consistency and variations
- Articulation (legato, staccato, etc.)
- Musical expression markers

## Technical Constraints & Considerations

### Audio Quality
- Browser recording has limitations compared to dedicated software
- Different piano types (upright, grand, digital) produce different acoustic signatures
- Recording environment variability affects analysis accuracy

### Performance Considerations
- Heavy audio processing should happen server-side
- Client-side processing limited to essential real-time features
- Consider bandwidth limitations for recording uploads

### AI Integration
- Structure prompts carefully for consistent, helpful feedback
- Include sufficient context about the piece and player
- Balance between technical feedback and musical expression coaching
- Avoid generic feedback by providing specific performance data

### Accessibility
- Support for screen readers
- Keyboard navigation for all features
- Color contrast considerations
- Alternative representations of audio/visual feedback

## Development Priorities

1. Core recording and playback functionality
2. Sheet music management system
3. Basic audio analysis pipeline
4. AI feedback integration
5. User dashboard and progress tracking
6. Advanced analysis features
